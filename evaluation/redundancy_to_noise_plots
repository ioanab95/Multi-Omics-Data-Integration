import numpy as np
from scipy import stats
import matplotlib.pyplot as plt

def plot_lines_for_noise_accuracy():
    fig = plt.figure(figsize=(8, 10), dpi=150)
    ax = plt.subplot(111)

    std = [0.1 * i for i in range(26)]

    MLP_values = [0.93823529411764706, 0.94117647058823528, 0.92099391480730231, 0.90917849898580116,
                  0.91135902636916843, 0.90076064908722098, 0.92048681541582145, 0.90496957403651113,
                  0.91384381338742382, 0.89954361054766729, 0.89513184584178496, 0.89315415821501021,
                  0.87322515212981744, 0.88651115618661258, 0.88504056795131836, 0.88184584178498981,
                  0.86364097363083181, 0.87150101419878312, 0.87469574036511166, 0.85228194726166318,
                  0.83970588235294108, 0.85055780933062886, 0.83407707910750517, 0.8574543610547668,
                  0.84416835699797166, 0.8614097363083163]

    MLP_std = [0.053761050265170383, 0.032158258766386179, 0.036809827525288441, 0.043769728125044371,
               0.036705590018617729, 0.02453234490750858, 0.031085482231146367, 0.034652517349219661,
               0.029834041068209371, 0.023583611161906132, 0.038787501749903044, 0.04065915837432614,
               0.039727604616130133, 0.026869377967981074, 0.019923327827598199, 0.038983379095796501,
               0.033367332625817876, 0.058031405058175299, 0.033495018430869127, 0.029301438528381914,
               0.044392750488012708, 0.017790518163492492,
               0.022239416034531719, 0.029049714347399645, 0.053457055562120978, 0.034866946125649036]

    RNN_values = [0.94781947261663269, 0.94290060851926982, 0.95446247464503053, 0.93722109533468567,
                  0.91926977687626787, 0.92023326572008113, 0.91384381338742382, 0.90938133874239335,
                  0.86485801217038527, 0.87494929006085198, 0.87074036511156172, 0.85278904665314403,
                  0.85253549695740372, 0.8421906693711968, 0.85055780933062886, 0.84639959432048673,
                  0.85623732251521312, 0.85699797160243407, 0.84761663286004052, 0.83605476673428003, 0.84538539553752534, 0.84416835699797166, 0.8370182555780934, 0.83433062880324549, 0.82718052738336711, 0.82865111561866134]

    RNN_std = [0.024741513905943466, 0.030116922739506599, 0.024914841238192802, 0.028880456749582787, 0.030511037249626803, 0.030912314725556212, 0.032686833783245425, 0.035462204082703112, 0.033895526282103378, 0.020903569407774773, 0.027036007742455851, 0.043280301783404279, 0.036257287336004362, 0.025565857260207814, 0.045173448701201019, 0.031451978738685986, 0.031209691488534041, 0.036844880056279165, 0.018795883668862392, 0.030244599759111163, 0.0248307367348382, 0.021898299139115736, 0.031401042206555763, 0.024778486977275572, 0.042947935666927187, 0.029026689868856009]

    SNN_values = [0.97956389452332648, 0.93970588235294117, 0.89366125760649084, 0.89487829614604464, 0.83752535496957403, 0.88701825557809344, 0.86191683569979727, 0.86607505070993906, 0.83752535496957403, 0.8739858012170385, 0.84665314401622704, 0.84781947261663271, 0.83382352941176463, 0.82276876267748489, 0.86364097363083159, 0.83554766734279917, 0.8320993914807302, 0.82865111561866134, 0.82718052738336711, 0.82347870182555771, 0.82226166328600403, 0.83970588235294108, 0.83605476673428003, 0.79442190669371182, 0.82991886409736326, 0.82814401622718048]

    SNN_std = [0.021588442649746051, 0.035482792015660472, 0.020782477319901151, 0.045910870101206765, 0.078012655595992866, 0.035477247498130013, 0.028086211492728989, 0.053299233905796488, 0.039592221372216019, 0.029239238341070499, 0.030129727590470012, 0.046622515080166814, 0.034514102506809176, 0.049077816853502904, 0.032464224223864212, 0.036268101574713614, 0.046165794984385659, 0.041645458411600021, 0.036186294216302116, 0.036498793545956407, 0.047603237935621663, 0.031929105565561257, 0.024848956800349611, 0.038574367749605737, 0.038598359107483736, 0.030546120078047103]

    plt.errorbar(std, MLP_values, yerr=MLP_std, color='blue', fmt='^--', label='MLP')
    plt.errorbar(std, RNN_values, yerr=RNN_std, color='red', fmt='o--', label='RNN')
    plt.errorbar(std, SNN_values, yerr=SNN_std, color='green', fmt='s--', label='SNN')

    xline = np.linspace(0, 2, 1000)
    slope, intercept, r_value, p_value, std_err = stats.linregress(std, MLP_values)
    #plt.plot(xline, slope * xline + intercept, 'b--', label='fitted line ($R^2 = %f$)' % r_value**2)

    slope, intercept, r_value, p_value, std_err = stats.linregress(std, RNN_values)
    #plt.plot(xline, slope * xline + intercept, 'r--', label='fitted line ($R^2 = %f$)' % r_value ** 2)

    slope, intercept, r_value, p_value, std_err = stats.linregress(std, SNN_values)
    #plt.plot(xline, slope * xline + intercept, 'g--', label='fitted line ($R^2 = %f$)' % r_value ** 2)

    handles, labels = ax.get_legend_handles_labels()

    #handles = [handles[3], handles[0], handles[4], handles[1], handles[5], handles[2]]
    #labels = [labels[3], labels[0], labels[4], labels[1], labels[5], labels[2]]

    plt.xlabel('Noise $\sigma^2$', size=16)
    plt.ylabel('Accuracy', size=16)

    plt.xticks(np.arange(-0.1, 2.6, 0.2))
    plt.yticks(np.arange(0.75, 1.1, 0.05))
    plt.ylim(0.74, 1.01)

    #plt.xlim(0, 2.01)
    #plt.ylim(0, 1.01)
    ax.legend(handles, labels, loc='upper right', prop={'size': 12}, ncol=1, numpoints=1)
    #plt.legend(loc='lower center', numpoints=1)

    plt.show()


plot_lines_for_noise_accuracy()



def plot_lines_for_noise_MCC():
    fig = plt.figure(figsize=(8, 10), dpi=150)
    ax = plt.subplot(111)

    std = [0.1 * i for i in range(26)]

    MLP_values = [0.60452334420347942, 0.64544145520831608, 0.39395872896474005, 0.37130885096812938, 0.40858595339995202, 0.17899029853746487, 0.47628775400055223, 0.43858026907657111, 0.40671142997934134, 0.38071345132215917, 0.25424082260835623, 0.33452326985564201, 0.09109082268704187, 0.26590511417881413, 0.11737241614404945, 0.16968955984394984, 0.12099710802108199, 0.30151559204590361, 0.2749474789631316, 0.18762177011870476, -0.021565947334014214, 0.050242370342626484, 0.095637429893607975, -0.018697040449864442, 0.12242071608874797, -0.036608162523548732]

    MLP_std = [0.38158035948192082, 0.2088369148517645, 0.36264765889380568, 0.34598939482355817, 0.33581484199176848, 0.28537242884774255, 0.27646419006081141, 0.23096599764120432, 0.27735326502470015, 0.13256032566873163, 0.33025583537442121, 0.22858639874074257, 0.18447410095104266, 0.19972018027124791, 0.16029618614304872, 0.24996651012806773, 0.17497395716645767, 0.25715879798113772, 0.19057333795332004, 0.17050252533779409, 0.13522070184596757, 0.13824847959298006, 0.12958841163217083, 0.097511765690163246, 0.21259829153760015, 0.053172268459099246]

    RNN_values = [0.71713536366584019, 0.67993689096568521, 0.7541019222653691, 0.64958215213983661, 0.55046759009131951, 0.53407491220547709, 0.49603037163092251, 0.48865323734793131, 0.2286711897040839, 0.23212608093255183, 0.25282888161196665, 0.17944172077374063, 0.16478481097440709, 0.066259164756588551, 0.13079029863900585, 0.13512613620126113, 0.17482059565321958, 0.15979180217419958, 0.069099966788658637, 0.085217019893863932, 0.067122196168770409, 0.044011420224081402, 0.093349936741227865, 0.042715792057965288, 0.0096044405623105355, 0.018842161674176856]

    RNN_std = [0.13709125685545098, 0.16759645306017176, 0.13376973375567217, 0.1703643493417816, 0.15361906723821644, 0.1910691629934036, 0.20261989423851021, 0.20987143849256792, 0.16838089078809618, 0.094207017832485321, 0.18658605480120732, 0.21447845865050344, 0.18223242719726124, 0.14311805895614627, 0.22878592565044217, 0.16168340247537147, 0.14757587753140411, 0.23205404189893489, 0.15565525233882951, 0.12796028678779353, 0.12033199056226344, 0.14239365092895545, 0.12727523588674594, 0.10726591641739536, 0.13065509736541916, 0.15446176781599505]

    SNN_values = [0.91436257900787887, 0.71884478570333254, 0.4647565270999805, 0.47959059789062675, 0.28143141611252437, 0.41965090481666872, 0.30915551096011418, 0.34348599882656478, 0.26446829812383338, 0.30809267886745145, 0.21050341805632403, 0.22394287608420732, 0.10723725819616847, 0.12967132651834734, 0.23149502999995444, 0.17967798235783761, 0.12419213544680045, 0.085079265547666885, 0.049269928882594766, 0.091444242496563632, 0.080049555320005031, 0.10641760314052158, -0.017163536369400285, 0.022057012015266254, 0.08405853246488873, -0.056260209702030314]

    SNN_std = [0.084529195040361757, 0.16366804636077137, 0.078626632383235806, 0.23197399615973197, 0.28512721451379697, 0.19071115655862167, 0.11595929347299375, 0.225545092102481, 0.11851740821427266, 0.15000393034163184, 0.16315544878974086, 0.18147664854284523, 0.15814413535967439, 0.18367474699252406, 0.20350235503356012, 0.1608029613919483, 0.23840205675788739, 0.17614489116233756, 0.095561736953904727, 0.13905373070909419, 0.22027585580503242, 0.14448570210086509, 0.088712013129585016, 0.11844946171838358, 0.17151888991470968, 0.067719650204891707]

    plt.errorbar(std, MLP_values, yerr=MLP_std, color='blue', fmt='^--', label='MLP')
    plt.errorbar(std, RNN_values, yerr=RNN_std, color='red', fmt='o--', label='RNN')
    plt.errorbar(std, SNN_values, yerr=SNN_std, color='green', fmt='s--', label='SNN')

    xline = np.linspace(0, 2, 1000)
    slope, intercept, r_value, p_value, std_err = stats.linregress(std, MLP_values)
    #plt.plot(xline, slope * xline + intercept, 'b--', label='fitted line ($R^2 = %f$)' % r_value**2)

    slope, intercept, r_value, p_value, std_err = stats.linregress(std, RNN_values)
    #plt.plot(xline, slope * xline + intercept, 'r--', label='fitted line ($R^2 = %f$)' % r_value ** 2)

    slope, intercept, r_value, p_value, std_err = stats.linregress(std, SNN_values)
    #plt.plot(xline, slope * xline + intercept, 'g--', label='fitted line ($R^2 = %f$)' % r_value ** 2)

    handles, labels = ax.get_legend_handles_labels()

    #handles = [handles[3], handles[0], handles[4], handles[1], handles[5], handles[2]]
    #labels = [labels[3], labels[0], labels[4], labels[1], labels[5], labels[2]]

    plt.xlabel('Noise $\sigma^2$', size=16)
    plt.ylabel('MCC', size=16)

    plt.xticks(np.arange(-0.1, 2.6, 0.2))
    plt.yticks(np.arange(-0.4, 1.1, 0.1))
    plt.ylim(-0.2, 1.01)

    #plt.xlim(0, 2.01)
    #plt.ylim(0, 1.01)
    ax.legend(handles, labels, loc='upper right', prop={'size': 12}, ncol=1, numpoints=1)
    #plt.legend(loc='lower center', numpoints=1)

    plt.show()


plot_lines_for_noise_MCC()